generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum SummativeGradeValue {
  EE
  ME
  AE
  BE
  NE
}

model SummativeGrade {
  id           String              @id @default(cuid())
  value        SummativeGradeValue
  standard     Standard            @relation(fields: [standardId], references: [id])
  standardId   String
  assignment   Assignment?         @relation(fields: [assignmentId], references: [id])
  assignmentId String?
  user         User                @relation(fields: [userId], references: [id])
  userId       String

  @@unique([id, userId])
}

model Assignment {
  id      String           @id @default(cuid())
  name    String
  grades  SummativeGrade[]
  class   Class            @relation(fields: [classId], references: [id])
  classId String
  user    User             @relation(fields: [userId], references: [id])
  userId  String

  @@unique([id, userId])
}

model Class {
  id          String       @id @default(cuid())
  name        String
  standards   Standard[]
  assignments Assignment[]
  user        User         @relation(fields: [userId], references: [id])
  userId      String

  @@unique([id, userId])
}

model Standard {
  id              String           @id @default(cuid())
  name            String
  class           Class            @relation(fields: [classId], references: [id])
  classId         String
  summativeGrades SummativeGrade[]
  user            User             @relation(fields: [userId], references: [id])
  userId          String

  @@unique([id, userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  summativeGrade SummativeGrade[]
  assignment     Assignment[]
  class          Class[]
  standard       Standard[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
